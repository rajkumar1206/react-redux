{"version":3,"sources":["components/navbar.js","components/home.js","components/todo.js","App.js","serviceWorker.js","reduces/rootreducer.js","index.js"],"names":["Navbar","className","type","href","data-target","to","id","connect","state","todo","length","dispatch","console","log","deletePost","props","onClick","Todo","handleChange","e","setState","target","value","handleSubmit","preventDefault","Math","random","list","this","todos","map","key","handleDelete","onChange","htmlFor","Component","ownProps","App","exact","path","component","Home","Boolean","window","location","hostname","match","initState","rootReducer","action","filter","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cd87437e.chunk.js","sourcesContent":["import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\n\r\nexport default function Navbar() {\r\n    return (\r\n        <div>\r\n            <nav className=\"nav-wrapper\">\r\n                <div className=\"container\">\r\n                    <a type=\"submit\" className=\"brand-logo\">Redux</a>\r\n                    <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\r\n                    <ul className=\"right hide-on-med-and-down\">\r\n                        <li><NavLink to=\"/\">Home</NavLink></li>\r\n                        <li><NavLink to=\"/todo\">Todo</NavLink></li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n            <ul className=\"sidenav\" id=\"mobile-demo\">\r\n                <li><NavLink to=\"/\">Home</NavLink></li>\r\n                <li><NavLink to=\"/todo\">Todo</NavLink></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <div className=\"container\">\r\n            <h2 className=\"left-align indigo-text\">You have {props.todo} number of todos...</h2>\r\n            <button className=\"btn align-center\" onClick = {props.deletePost}>Remove all</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        todo: state.length\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    console.log(dispatch);\r\n    return {\r\n        deletePost: () => { dispatch({type: \"DEL\"})}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Home)","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Todo extends Component {\r\n    state = {\r\n        todo: \"\"\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            todo: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        let todo = {id: Math.random(), todo: this.state.todo};\r\n        this.props.handleSubmit(todo);\r\n        this.setState({\r\n            todo: \"\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let list = this.props.todos.map(todo => (\r\n            <li className=\"collection-item\" key={todo.id} onClick={()=>{this.props.handleDelete(todo.id)}}>{todo.todo}</li>\r\n        ))\r\n        return (\r\n            <div className=\"container\">\r\n                <h1 className=\"indigo-text center\">Todo</h1>\r\n                <div className=\"row\">\r\n                    <div className=\"input-field col s6\">\r\n                        <input value={this.state.todo}type=\"text\" className=\"validate\" id=\"todo\" onChange = {this.handleChange}/>\r\n                        <label className=\"active\" htmlFor=\"first_name2\">First Name</label>\r\n                    </div>\r\n                    <button className=\"btn indigo left\" onClick={this.handleSubmit}>Add Todo</button>\r\n                </div>\r\n                <ul className=\"collection\">\r\n                    {\r\n                        list\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        todos: state \r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleDelete: (id) => { dispatch({type: 'DELETE', id: id}) },\r\n        handleSubmit: (todo) => { dispatch({ type: \"ADD\", todo: todo})}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Todo)","import React from 'react';\nimport Navbar from './components/navbar';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Home from './components/home';\nimport Todo from './components/todo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <BrowserRouter>\n        <Navbar />\n        <Route exact path = \"/\" component={Home} />\n        <Route exact path = \"/todo\" component={Todo} />\n      </BrowserRouter>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = [\r\n    {todo: \"buy milk drink\", id: 1}\r\n]\r\n\r\nconst rootReducer = (state = initState, action) => {\r\n    // console.log(action);\r\n    if ( action.type === 'DELETE'){\r\n        let todos = state.filter(todo => action.id !== todo.id);\r\n        return todos\r\n    }\r\n    if ( action.type === \"ADD\" ){\r\n        let todos = [...state, action.todo];\r\n        return todos\r\n    }\r\n    if(action.type == \"DEL\"){\r\n        return [];\r\n    }\r\n    return state;\r\n}\r\n\r\nexport default rootReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux'\nimport rootReducer from './reduces/rootreducer'\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}